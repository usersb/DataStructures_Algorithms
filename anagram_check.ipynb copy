{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Anagram Check**\n",
    "\n",
    "**Problem\n",
    "Given two strings, check to see if they are anagrams. An anagram is when the two strings can be written using the exact same letters (so you can just rearrange the letters to get a different phrase or word).**\n",
    "\n",
    "For example:\n",
    "\n",
    "\"public relations\" is an anagram of \"crap built on lies.\"\n",
    "\n",
    "\"clint eastwood\" is an anagram of \"old west action\"\n",
    "\n",
    "Note: Ignore spaces and capitalization. So \"d go\" is an anagram of \"God\" and \"dog\" and \"o d g\"."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Class and function to test the solutions\n",
    "\n",
    "from nose.tools import assert_equal\n",
    "class Anagram_test(object):\n",
    "    \n",
    "    def test(self,sol):\n",
    "        assert_equal(sol(\"d og\",\"Dog\"),True)\n",
    "        assert_equal(sol(\"d og\",\"god\"),True)\n",
    "        assert_equal(sol(\"d og\",\"o d g\"),True)\n",
    "        assert_equal(sol(\"clint eastwood\",\"old west action\"),True)\n",
    "        assert_equal(sol(\"aa\",\"bb\"),False)\n",
    "        assert_equal(sol(\"public relations\",\"crap built on lies\"),True)\n",
    "        assert_equal(sol(\"go go go\",\"gggooo\"),True)\n",
    "        assert_equal(sol(\"abc\",\"cba\"),True)\n",
    "        assert_equal(sol(\"hi man\",\"hi        man\"),True)\n",
    "        assert_equal(sol(\"aabbcc\",\"aabbc\"),False)\n",
    "        assert_equal(sol(\"123\",\"1 2\"),False)\n",
    "        print(\"All tests passed\")\n",
    "        \n",
    "                "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Solution**\n",
    "\n",
    "There are two ways of thinking about this problem, if two strings have the same frequency of letters/element (meaning each letter shows up the same number of times in both strings) then they are anagrams of eachother. On a similar vien of logic, if two strings are equal to each other once they are sorted, then they are also anagrams of each other.\n",
    "\n",
    "You would be able to implement this second solution pretty easily in Python:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#each of the strings should contain all the same letters with the same frequencies apart from spaces\n",
    "#change the case of strings to lower to account for capital letters\n",
    "#remove spaces from both the strings\n",
    "#compare if the sorted strings are equal\n",
    "#example - \"d og\" ia an anagram of \"Dog\" and \"god\" and \"o d g\"\n",
    "\n",
    "\n",
    "def anagram(s1,s2):\n",
    "    s1 = (s1.lower()).replace(\" \",\"\")\n",
    "    s2 = (s2.lower()).replace(\" \",\"\")\n",
    "    \n",
    "    #any element in s1 is in s2\n",
    "    #if all(map(lambda x: x in s2, s1)):\n",
    "    if sorted(s1) == sorted(s2):\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now the above sorting approach is simple, but is actually not optimal and in an interview setting you would probably be asked to implement a more manual solution involving just counting the number of letters in each string to test your ability to understand hash tables. Let's build out a fuller solution using counting and Python dictionaries:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def anagram2(s1,s2):\n",
    "    s1 = s1.lower().replace(\" \",\"\")\n",
    "    s2 = s2.lower().replace(\" \",\"\")\n",
    "    \n",
    "    #Edge case check\n",
    "    #check if the lengths of the strings are equal, if not they aren't anagrams \n",
    "    \n",
    "    if len(s1) != len(s2):\n",
    "        return False\n",
    "    \n",
    "    #if Edge case passes,\n",
    "    #create a dictionary with the counts of the letters in the first string\n",
    "    #while updating the counts for letters in the second string, subtract count instead of adding\n",
    "    #if the counts for all the letters is zero then the strings are anagrams else not\n",
    "    \n",
    "    \n",
    "    count = {}\n",
    "    \n",
    "    for letter in s1:\n",
    "        if letter in count:\n",
    "            count[letter] += 1\n",
    "        else:\n",
    "            count[letter] = 1\n",
    "            \n",
    "    for letter in s2:\n",
    "        if letter in count:\n",
    "            count[letter] -= 1\n",
    "        else:\n",
    "            count[letter] = 1\n",
    "            \n",
    "    for k in count:\n",
    "        if count[k] != 0:\n",
    "            return False\n",
    "        else:\n",
    "            return True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n"
     ]
    }
   ],
   "source": [
    "# string1 = \"d og\"\n",
    "# string2 = \"Dog\"\n",
    "\n",
    "# string1 = \"d og\"\n",
    "# string2 = \"god\"\n",
    "\n",
    "# string1 = \"d og\"\n",
    "# string2 = \"o d g\"\n",
    "\n",
    "# string1 = \"clint eastwood\"\n",
    "# string2 = \"old west action\"\n",
    "\n",
    "# string1 = \"aa\"\n",
    "# string2 = \"bb\"\n",
    "\n",
    "# string1 = \"public relations\"\n",
    "# string2 = \"crap built on lies\"\n",
    "\n",
    "# string1 = \"go go go\"\n",
    "# string2 = \"gggooo\"\n",
    "\n",
    "# string1 = \"abc\"\n",
    "# string2 = \"cba\"\n",
    "\n",
    "# string1 = \"hi man\"\n",
    "# string2 = \"hi        man\"\n",
    "\n",
    "# string1 = \"aabbcc\"\n",
    "# string2 = \"aabbc\"\n",
    "\n",
    "# string1 = \"123\"\n",
    "# string2 = \"1 2\"\n",
    "\n",
    "is_anagram = anagram(string1,string2)\n",
    "print(is_anagram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All tests passed\n"
     ]
    }
   ],
   "source": [
    "t = Anagram_test()\n",
    "t.test(anagram)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All tests passed\n"
     ]
    }
   ],
   "source": [
    "t1 = Anagram_test()\n",
    "t1.test(anagram2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:py35]",
   "language": "python",
   "name": "conda-env-py35-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
